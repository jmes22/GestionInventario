I have to do the Implementation of the Repository and Unit of Work pattern. I share the structure of the project with you.
How do I do it?
/Solution 
/Api
/Service 
/Repository 
/Entity

I'll help you implement the Repository and Unit of Work patterns, which are great for managing data access and maintaining separation of concerns. I'll create a comprehensive solution following clean architecture principles.

```csharp
// Entity/BaseEntity.cs
public abstract class BaseEntity
{
    public int Id { get; set; }
}

// Entity/Product.cs
public class Product : BaseEntity
{
    public string Name { get; set; }
    public decimal Price { get; set; }
    public string Description { get; set; }
}

// Repository/IGenericRepository.cs
public interface IGenericRepository<T> where T : BaseEntity
{
    Task<T> GetByIdAsync(int id);
    Task<IEnumerable<T>> GetAllAsync();
    Task AddAsync(T entity);
    Task UpdateAsync(T entity);
    Task DeleteAsync(T entity);
}

// Repository/GenericRepository.cs
public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity
{
    protected readonly DbContext _context;
    protected readonly DbSet<T> _dbSet;

    public GenericRepository(DbContext context)
    {
        _context = context;
        _dbSet = context.Set<T>();
    }

    public virtual async Task<T> GetByIdAsync(int id)
    {
        return await _dbSet.FindAsync(id);
    }

    public virtual async Task<IEnumerable<T>> GetAllAsync()
    {
        return await _dbSet.ToListAsync();
    }

    public virtual async Task AddAsync(T entity)
    {
        await _dbSet.AddAsync(entity);
    }

    public virtual async Task UpdateAsync(T entity)
    {
        _dbSet.Update(entity);
    }

    public virtual async Task DeleteAsync(T entity)
    {
        _dbSet.Remove(entity);
    }
}

// Repository/IProductRepository.cs
public interface IProductRepository : IGenericRepository<Product>
{
    Task<IEnumerable<Product>> GetProductsByPriceRangeAsync(decimal minPrice, decimal maxPrice);
}

// Repository/ProductRepository.cs
public class ProductRepository : GenericRepository<Product>, IProductRepository
{
    public ProductRepository(DbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<Product>> GetProductsByPriceRangeAsync(decimal minPrice, decimal maxPrice)
    {
        return await _dbSet.Where(p => p.Price >= minPrice && p.Price <= maxPrice).ToListAsync();
    }
}

// Repository/IUnitOfWork.cs
public interface IUnitOfWork : IDisposable
{
    IProductRepository Products { get; }
    Task<int> CompleteAsync();
}

// Repository/UnitOfWork.cs
public class UnitOfWork : IUnitOfWork
{
    private readonly DbContext _context;
    private IProductRepository _productRepository;

    public UnitOfWork(DbContext context)
    {
        _context = context;
    }

    public IProductRepository Products => _productRepository ??= new ProductRepository(_context);

    public async Task<int> CompleteAsync()
    {
        return await _context.SaveChangesAsync();
    }

    public void Dispose()
    {
        _context.Dispose();
    }
}

// Service/IProductService.cs
public interface IProductService
{
    Task<Product> GetProductByIdAsync(int id);
    Task<IEnumerable<Product>> GetAllProductsAsync();
    Task<IEnumerable<Product>> GetProductsByPriceRangeAsync(decimal minPrice, decimal maxPrice);
    Task CreateProductAsync(Product product);
    Task UpdateProductAsync(Product product);
    Task DeleteProductAsync(int id);
}

// Service/ProductService.cs
public class ProductService : IProductService
{
    private readonly IUnitOfWork _unitOfWork;

    public ProductService(IUnitOfWork unitOfWork)
    {
        _unitOfWork = unitOfWork;
    }

    public async Task<Product> GetProductByIdAsync(int id)
    {
        return await _unitOfWork.Products.GetByIdAsync(id);
    }

    public async Task<IEnumerable<Product>> GetAllProductsAsync()
    {
        return await _unitOfWork.Products.GetAllAsync();
    }

    public async Task<IEnumerable<Product>> GetProductsByPriceRangeAsync(decimal minPrice, decimal maxPrice)
    {
        return await _unitOfWork.Products.GetProductsByPriceRangeAsync(minPrice, maxPrice);
    }

    public async Task CreateProductAsync(Product product)
    {
        await _unitOfWork.Products.AddAsync(product);
        await _unitOfWork.CompleteAsync();
    }

    public async Task UpdateProductAsync(Product product)
    {
        await _unitOfWork.Products.UpdateAsync(product);
        await _unitOfWork.CompleteAsync();
    }

    public async Task DeleteProductAsync(int id)
    {
        var product = await _unitOfWork.Products.GetByIdAsync(id);
        if (product != null)
        {
            await _unitOfWork.Products.DeleteAsync(product);
            await _unitOfWork.CompleteAsync();
        }
    }
}

// Api/ProductController.cs
[ApiController]
[Route("api/[controller]")]
public class ProductController : ControllerBase
{
    private readonly IProductService _productService;

    public ProductController(IProductService productService)
    {
        _productService = productService;
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Product>> GetProduct(int id)
    {
        var product = await _productService.GetProductByIdAsync(id);
        if (product == null)
            return NotFound();

        return Ok(product);
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Product>>> GetProducts()
    {
        var products = await _productService.GetAllProductsAsync();
        return Ok(products);
    }

    [HttpPost]
    public async Task<ActionResult<Product>> CreateProduct(Product product)
    {
        await _productService.CreateProductAsync(product);
        return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateProduct(int id, Product product)
    {
        if (id != product.Id)
            return BadRequest();

        await _productService.UpdateProductAsync(product);
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteProduct(int id)
    {
        await _productService.DeleteProductAsync(id);
        return NoContent();
    }
}

```

This implementation provides a complete Repository and Unit of Work pattern setup. Here's how the different components work together:

1. **Entity Layer**:
   - `BaseEntity`: Base class for all entities
   - `Product`: Sample entity inheriting from BaseEntity

2. **Repository Layer**:
   - `IGenericRepository<T>`: Generic repository interface with basic CRUD operations
   - `GenericRepository<T>`: Generic repository implementation
   - `IProductRepository`: Product-specific repository interface
   - `ProductRepository`: Product-specific repository implementation
   - `IUnitOfWork`: Unit of Work interface
   - `UnitOfWork`: Unit of Work implementation

3. **Service Layer**:
   - `IProductService`: Business logic interface
   - `ProductService`: Business logic implementation

4. **API Layer**:
   - `ProductController`: REST API endpoints

To use this implementation, you'll need to:

1. Configure dependency injection in your `Program.cs` or `Startup.cs`:
```csharp
services.AddScoped<IUnitOfWork, UnitOfWork>();
services.AddScoped<IProductService, ProductService>();
```

2. Make sure you have the required NuGet packages:
```xml
Microsoft.EntityFrameworkCore
Microsoft.AspNetCore.Mvc
```

Would you like me to explain any specific part in more detail or show you how to implement specific functionality?


In which project do I install Microsoft.EntityFrameworkCore?

Since you already have a database created in SQL Server, we'll need to create the DbContext and use the database-first approach. Let me help you set this up.

1. First, install these packages in your **Repository** project:
```powershell
Install-Package Microsoft.EntityFrameworkCore
Install-Package Microsoft.EntityFrameworkCore.SqlServer
Install-Package Microsoft.EntityFrameworkCore.Tools
```

2. Then, create your DbContext in the Repository project. Here's how:

```csharp
// Repository/Data/ApplicationDbContext.cs
public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    // DbSet properties for your existing tables
    public DbSet<Product> Products { get; set; }
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        
        // Configure your entity mappings here if needed
        modelBuilder.Entity<Product>(entity =>
        {
            entity.ToTable("Products"); // Specify the actual table name in your database
            entity.HasKey(e => e.Id);
            // Add other property configurations if needed
        });
    }
}

```

3. Add the connection string in your **API** project's `appsettings.json`:
```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=YourServer;Database=YourDatabase;Trusted_Connection=True;MultipleActiveResultSets=true"
  }
}
```

4. Configure the DbContext in your **API** project's `Program.cs`:
```csharp
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register repositories and services
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IProductService, ProductService>();
```

5. To scaffold your existing database into entity models, run this command in Package Manager Console (make sure Repository project is set as Default project in PMC):
```powershell
Scaffold-DbContext "Your_Connection_String" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Context ApplicationDbContext -Tables Table1, Table2 -Force
```

For example:
```powershell
Scaffold-DbContext "Server=localhost;Database=YourDB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Context ApplicationDbContext -Tables Products -Force
```

This will create:
- Entity classes based on your database tables
- A DbContext class with the configurations

6. After scaffolding, you might need to:
- Move the generated entity classes to your Entity project
- Adjust namespaces
- Implement your interfaces (IEntity, etc.)
- Modify the generated DbContext to match your needs

Would you like me to show you:
1. How to scaffold specific tables from your database?
2. How to customize the entity configurations?
3. How to handle relationships between your entities?


Cuando ejecuto el proyecto devuelve el siguiente error:
System.AggregateException: 'Some services are not able to be constructed (Error while validating the service descriptor 'ServiceType: Repository.IUnitOfWork Lifetime: Scoped ImplementationType: Repository.UnitOfWork': Unable to resolve service for type 'Microsoft.EntityFrameworkCore.DbContext' while attempting to activate 'Repository.UnitOfWork'.) (Error while validating the service descriptor 'ServiceType: Services.IProductService Lifetime: Scoped ImplementationType: Services.ProductService': Unable to resolve service for type 'Microsoft.EntityFrameworkCore.DbContext' while attempting to activate 'Repository.UnitOfWork'.)'

El error ocurre porque estamos inyectando DbContext directamente en lugar de ApplicationDbContext. Vamos a corregir esto:

1. Primero, modifica la clase UnitOfWork para usar ApplicationDbContext:

```csharp
// Repository/UnitOfWork.cs
public class UnitOfWork : IUnitOfWork
{
    private readonly ApplicationDbContext _context;
    private IProductRepository _productRepository;

    public UnitOfWork(ApplicationDbContext context)  // Cambiar DbContext por ApplicationDbContext
    {
        _context = context;
    }

    public IProductRepository Products => _productRepository ??= new ProductRepository(_context);

    public async Task<int> CompleteAsync()
    {
        return await _context.SaveChangesAsync();
    }

    public void Dispose()
    {
        _context.Dispose();
    }
}
```

2. También modifica el GenericRepository:

```csharp
// Repository/GenericRepository.cs
public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity
{
    protected readonly ApplicationDbContext _context;  // Cambiar DbContext por ApplicationDbContext
    protected readonly DbSet<T> _dbSet;

    public GenericRepository(ApplicationDbContext context)  // Cambiar DbContext por ApplicationDbContext
    {
        _context = context;
        _dbSet = context.Set<T>();
    }
    // ... resto del código ...
}
```

3. Asegúrate que en Program.cs tienes la configuración correcta:

```csharp
// Program.cs
var builder = WebApplication.CreateBuilder(args);

// Agregar servicios al contenedor
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IProductService, ProductService>();

// ... resto de la configuración ...
```

4. Verifica que tu cadena de conexión esté correctamente configurada en appsettings.json:

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=TuServidor;Database=TuBaseDeDatos;Trusted_Connection=True;MultipleActiveResultSets=true"
  }
}
```

5. Asegúrate de tener los using necesarios en Program.cs:

```csharp
using Microsoft.EntityFrameworkCore;
using Repository;  // donde está tu UnitOfWork
using Services;    // donde está tu ProductService
using Repository.Data;  // donde está tu ApplicationDbContext
```

¿Necesitas que te ayude con algo más específico de la configuración?


este es el script sql de la tabla producto, modifica el codigo para que soporte la estructura de la tabla:
CREATE TABLE [dbo].[Producto](
    [ProductoId] [int] IDENTITY(1,1) NOT NULL,
    [Nombre] [varchar](100) NOT NULL,
    [Precio] [numeric](18, 2) NOT NULL,
    [Cantidad] [numeric](18, 0) NULL,
 CONSTRAINT [PK_Producto] PRIMARY KEY CLUSTERED 
(
    [ProductoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

Voy a actualizar el código para que coincida con la estructura de tu tabla Producto:

1. Primero, actualicemos la entidad Producto:

```csharp
// Entity/Producto.cs
public class Producto
{
    public int ProductoId { get; set; }
    public string Nombre { get; set; }
    public decimal Precio { get; set; }
    public decimal? Cantidad { get; set; }
}
```

2. Actualicemos las interfaces y repositorios:

```csharp
// Repository/IGenericRepository.cs
public interface IGenericRepository<T> where T : class
{
    Task<T> GetByIdAsync(int id);
    Task<IEnumerable<T>> GetAllAsync();
    Task AddAsync(T entity);
    Task UpdateAsync(T entity);
    Task DeleteAsync(T entity);
}

// Repository/GenericRepository.cs
public class GenericRepository<T> : IGenericRepository<T> where T : class
{
    protected readonly ApplicationDbContext _context;
    protected readonly DbSet<T> _dbSet;

    public GenericRepository(ApplicationDbContext context)
    {
        _context = context;
        _dbSet = context.Set<T>();
    }

    public virtual async Task<T> GetByIdAsync(int id)
    {
        return await _dbSet.FindAsync(id);
    }

    public virtual async Task<IEnumerable<T>> GetAllAsync()
    {
        return await _dbSet.ToListAsync();
    }

    public virtual async Task AddAsync(T entity)
    {
        await _dbSet.AddAsync(entity);
    }

    public virtual async Task UpdateAsync(T entity)
    {
        _dbSet.Update(entity);
    }

    public virtual async Task DeleteAsync(T entity)
    {
        _dbSet.Remove(entity);
    }
}

// Repository/IProductoRepository.cs
public interface IProductoRepository : IGenericRepository<Producto>
{
    Task<IEnumerable<Producto>> GetProductosByPriceRangeAsync(decimal minPrice, decimal maxPrice);
}

// Repository/ProductoRepository.cs
public class ProductoRepository : GenericRepository<Producto>, IProductoRepository
{
    public ProductoRepository(ApplicationDbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<Producto>> GetProductosByPriceRangeAsync(decimal minPrice, decimal maxPrice)
    {
        return await _dbSet.Where(p => p.Precio >= minPrice && p.Precio <= maxPrice).ToListAsync();
    }
}

// Repository/IUnitOfWork.cs
public interface IUnitOfWork : IDisposable
{
    IProductoRepository Productos { get; }
    Task<int> CompleteAsync();
}

// Repository/UnitOfWork.cs
public class UnitOfWork : IUnitOfWork
{
    private readonly ApplicationDbContext _context;
    private IProductoRepository _productoRepository;

    public UnitOfWork(ApplicationDbContext context)
    {
        _context = context;
    }

    public IProductoRepository Productos => _productoRepository ??= new ProductoRepository(_context);

    public async Task<int> CompleteAsync()
    {
        return await _context.SaveChangesAsync();
    }

    public void Dispose()
    {
        _context.Dispose();
    }
}

// Service/IProductoService.cs
public interface IProductoService
{
    Task<Producto> GetProductoByIdAsync(int id);
    Task<IEnumerable<Producto>> GetAllProductosAsync();
    Task<IEnumerable<Producto>> GetProductosByPriceRangeAsync(decimal minPrice, decimal maxPrice);
    Task CreateProductoAsync(Producto producto);
    Task UpdateProductoAsync(Producto producto);
    Task DeleteProductoAsync(int id);
}

// Service/ProductoService.cs
public class ProductoService : IProductoService
{
    private readonly IUnitOfWork _unitOfWork;

    public ProductoService(IUnitOfWork unitOfWork)
    {
        _unitOfWork = unitOfWork;
    }

    public async Task<Producto> GetProductoByIdAsync(int id)
    {
        return await _unitOfWork.Productos.GetByIdAsync(id);
    }

    public async Task<IEnumerable<Producto>> GetAllProductosAsync()
    {
        return await _unitOfWork.Productos.GetAllAsync();
    }

    public async Task<IEnumerable<Producto>> GetProductosByPriceRangeAsync(decimal minPrice, decimal maxPrice)
    {
        return await _unitOfWork.Productos.GetProductosByPriceRangeAsync(minPrice, maxPrice);
    }

    public async Task CreateProductoAsync(Producto producto)
    {
        await _unitOfWork.Productos.AddAsync(producto);
        await _unitOfWork.CompleteAsync();
    }

    public async Task UpdateProductoAsync(Producto producto)
    {
        await _unitOfWork.Productos.UpdateAsync(producto);
        await _unitOfWork.CompleteAsync();
    }

    public async Task DeleteProductoAsync(int id)
    {
        var producto = await _unitOfWork.Productos.GetByIdAsync(id);
        if (producto != null)
        {
            await _unitOfWork.Productos.DeleteAsync(producto);
            await _unitOfWork.CompleteAsync();
        }
    }
}

// Api/ProductoController.cs
[ApiController]
[Route("api/[controller]")]
public class ProductoController : ControllerBase
{
    private readonly IProductoService _productoService;

    public ProductoController(IProductoService productoService)
    {
        _productoService = productoService;
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Producto>> GetProducto(int id)
    {
        var producto = await _productoService.GetProductoByIdAsync(id);
        if (producto == null)
            return NotFound();

        return Ok(producto);
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Producto>>> GetProductos()
    {
        var productos = await _productoService.GetAllProductosAsync();
        return Ok(productos);
    }

    [HttpPost]
    public async Task<ActionResult<Producto>> CreateProducto(Producto producto)
    {
        await _productoService.CreateProductoAsync(producto);
        return CreatedAtAction(nameof(GetProducto), new { id = producto.ProductoId }, producto);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateProducto(int id, Producto producto)
    {
        if (id != producto.ProductoId)
            return BadRequest();

        await _productoService.UpdateProductoAsync(producto);
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteProducto(int id)
    {
        await _productoService.DeleteProductoAsync(id);
        return NoContent();
    }
}

```

3. Y finalmente, el ApplicationDbContext:

```csharp
// Repository/Data/ApplicationDbContext.cs
public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public DbSet<Producto> Productos { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.ToTable("Producto");
            entity.HasKey(e => e.ProductoId);

            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 0)");
        });
    }
}
```

4. Actualiza el Program.cs:

```csharp
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IProductoService, ProductoService>();
```

Los cambios principales incluyen:
- Renombrado de Product a Producto
- Actualización de las propiedades según la estructura de la tabla
- Configuración específica de los tipos de datos en el DbContext
- Actualización de todos los servicios y repositorios para usar la nueva estructura

¿Necesitas ayuda con algo más específico?

Agrega al proyecto el Patrón Result

El Patrón Result nos ayudará a manejar mejor las respuestas y errores de nuestra aplicación. Voy a implementarlo:

```csharp
// Entity/Common/Result.cs
public class Result<T>
{
    public bool IsSuccess { get; }
    public T Data { get; }
    public string Error { get; }
    public int StatusCode { get; }

    protected Result(bool isSuccess, T data, string error, int statusCode)
    {
        IsSuccess = isSuccess;
        Data = data;
        Error = error;
        StatusCode = statusCode;
    }

    public static Result<T> Success(T data, int statusCode = 200)
    {
        return new Result<T>(true, data, null, statusCode);
    }

    public static Result<T> Failure(string error, int statusCode = 400)
    {
        return new Result<T>(false, default, error, statusCode);
    }
}

// Entity/Common/ResultList.cs
public class ResultList<T>
{
    public bool IsSuccess { get; }
    public IEnumerable<T> Data { get; }
    public string Error { get; }
    public int StatusCode { get; }
    public int TotalRecords { get; }

    protected ResultList(bool isSuccess, IEnumerable<T> data, string error, int statusCode, int totalRecords)
    {
        IsSuccess = isSuccess;
        Data = data;
        Error = error;
        StatusCode = statusCode;
        TotalRecords = totalRecords;
    }

    public static ResultList<T> Success(IEnumerable<T> data, int totalRecords, int statusCode = 200)
    {
        return new ResultList<T>(true, data, null, statusCode, totalRecords);
    }

    public static ResultList<T> Failure(string error, int statusCode = 400)
    {
        return new ResultList<T>(false, default, error, statusCode, 0);
    }
}

// Service/IProductoService.cs
public interface IProductoService
{
    Task<Result<Producto>> GetProductoByIdAsync(int id);
    Task<ResultList<Producto>> GetAllProductosAsync();
    Task<ResultList<Producto>> GetProductosByPriceRangeAsync(decimal minPrice, decimal maxPrice);
    Task<Result<Producto>> CreateProductoAsync(Producto producto);
    Task<Result<Producto>> UpdateProductoAsync(Producto producto);
    Task<Result<bool>> DeleteProductoAsync(int id);
}

// Service/ProductoService.cs
public class ProductoService : IProductoService
{
    private readonly IUnitOfWork _unitOfWork;

    public ProductoService(IUnitOfWork unitOfWork)
    {
        _unitOfWork = unitOfWork;
    }

    public async Task<Result<Producto>> GetProductoByIdAsync(int id)
    {
        try
        {
            var producto = await _unitOfWork.Productos.GetByIdAsync(id);
            if (producto == null)
                return Result<Producto>.Failure($"No se encontró el producto con ID: {id}", 404);

            return Result<Producto>.Success(producto);
        }
        catch (Exception ex)
        {
            return Result<Producto>.Failure($"Error al obtener el producto: {ex.Message}", 500);
        }
    }

    public async Task<ResultList<Producto>> GetAllProductosAsync()
    {
        try
        {
            var productos = await _unitOfWork.Productos.GetAllAsync();
            var list = productos.ToList();
            return ResultList<Producto>.Success(list, list.Count);
        }
        catch (Exception ex)
        {
            return ResultList<Producto>.Failure($"Error al obtener los productos: {ex.Message}", 500);
        }
    }

    public async Task<ResultList<Producto>> GetProductosByPriceRangeAsync(decimal minPrice, decimal maxPrice)
    {
        try
        {
            var productos = await _unitOfWork.Productos.GetProductosByPriceRangeAsync(minPrice, maxPrice);
            var list = productos.ToList();
            return ResultList<Producto>.Success(list, list.Count);
        }
        catch (Exception ex)
        {
            return ResultList<Producto>.Failure($"Error al obtener los productos por rango de precio: {ex.Message}", 500);
        }
    }

    public async Task<Result<Producto>> CreateProductoAsync(Producto producto)
    {
        try
        {
            await _unitOfWork.Productos.AddAsync(producto);
            await _unitOfWork.CompleteAsync();
            return Result<Producto>.Success(producto, 201);
        }
        catch (Exception ex)
        {
            return Result<Producto>.Failure($"Error al crear el producto: {ex.Message}", 500);
        }
    }

    public async Task<Result<Producto>> UpdateProductoAsync(Producto producto)
    {
        try
        {
            var existingProducto = await _unitOfWork.Productos.GetByIdAsync(producto.ProductoId);
            if (existingProducto == null)
                return Result<Producto>.Failure($"No se encontró el producto con ID: {producto.ProductoId}", 404);

            await _unitOfWork.Productos.UpdateAsync(producto);
            await _unitOfWork.CompleteAsync();
            return Result<Producto>.Success(producto);
        }
        catch (Exception ex)
        {
            return Result<Producto>.Failure($"Error al actualizar el producto: {ex.Message}", 500);
        }
    }

    public async Task<Result<bool>> DeleteProductoAsync(int id)
    {
        try
        {
            var producto = await _unitOfWork.Productos.GetByIdAsync(id);
            if (producto == null)
                return Result<bool>.Failure($"No se encontró el producto con ID: {id}", 404);

            await _unitOfWork.Productos.DeleteAsync(producto);
            await _unitOfWork.CompleteAsync();
            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            return Result<bool>.Failure($"Error al eliminar el producto: {ex.Message}", 500);
        }
    }
}

// Api/ProductoController.cs
[ApiController]
[Route("api/[controller]")]
public class ProductoController : ControllerBase
{
    private readonly IProductoService _productoService;

    public ProductoController(IProductoService productoService)
    {
        _productoService = productoService;
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetProducto(int id)
    {
        var result = await _productoService.GetProductoByIdAsync(id);
        if (!result.IsSuccess)
            return StatusCode(result.StatusCode, result.Error);

        return Ok(result.Data);
    }

    [HttpGet]
    public async Task<IActionResult> GetProductos()
    {
        var result = await _productoService.GetAllProductosAsync();
        if (!result.IsSuccess)
            return StatusCode(result.StatusCode, result.Error);

        return Ok(new { 
            Data = result.Data,
            TotalRecords = result.TotalRecords
        });
    }

    [HttpGet("pricerange")]
    public async Task<IActionResult> GetProductosByPriceRange([FromQuery] decimal minPrice, [FromQuery] decimal maxPrice)
    {
        var result = await _productoService.GetProductosByPriceRangeAsync(minPrice, maxPrice);
        if (!result.IsSuccess)
            return StatusCode(result.StatusCode, result.Error);

        return Ok(new { 
            Data = result.Data,
            TotalRecords = result.TotalRecords
        });
    }

    [HttpPost]
    public async Task<IActionResult> CreateProducto(Producto producto)
    {
        var result = await _productoService.CreateProductoAsync(producto);
        if (!result.IsSuccess)
            return StatusCode(result.StatusCode, result.Error);

        return CreatedAtAction(nameof(GetProducto), new { id = result.Data.ProductoId }, result.Data);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateProducto(int id, Producto producto)
    {
        if (id != producto.ProductoId)
            return BadRequest("El ID de la ruta no coincide con el ID del producto");

        var result = await _productoService.UpdateProductoAsync(producto);
        if (!result.IsSuccess)
            return StatusCode(result.StatusCode, result.Error);

        return Ok(result.Data);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteProducto(int id)
    {
        var result = await _productoService.DeleteProductoAsync(id);
        if (!result.IsSuccess)
            return StatusCode(result.StatusCode, result.Error);

        return NoContent();
    }
}

```

Los cambios principales incluyen:

1. Creación de clases Result genéricas para manejar:
   - Respuestas individuales (Result<T>)
   - Listas de respuestas (ResultList<T>)

2. Cada clase Result contiene:
   - IsSuccess: indica si la operación fue exitosa
   - Data: contiene los datos de la respuesta
   - Error: mensaje de error si la operación falló
   - StatusCode: código HTTP de la respuesta
   - TotalRecords (solo para ResultList): total de registros en la lista

3. Actualización del IProductoService y ProductoService para usar el patrón Result

4. Actualización del ProductoController para manejar las respuestas Result

Beneficios de esta implementación:
- Manejo consistente de errores
- Respuestas estandarizadas
- Mejor control de los códigos de estado HTTP
- Facilita el manejo de errores en el cliente
- Mejor trazabilidad de errores

¿Necesitas alguna aclaración o ayuda adicional con la implementación?

Agrega al proyecto un middleware para el manejo de excepciones no controladas.

Te ayudo a crear un middleware personalizado para el manejo de excepciones globales:

```csharp
// Entity/Common/ErrorDetails.cs
public class ErrorDetails
{
    public int StatusCode { get; set; }
    public string Message { get; set; }
    public string ExceptionType { get; set; }
    public string StackTrace { get; set; }
    public DateTime Timestamp { get; set; }

    public ErrorDetails()
    {
        Timestamp = DateTime.UtcNow;
    }
}

// Api/Middleware/ExceptionMiddleware.cs
public class ExceptionMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<ExceptionMiddleware> _logger;
    private readonly IWebHostEnvironment _env;

    public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger, IWebHostEnvironment env)
    {
        _next = next;
        _logger = logger;
        _env = env;
    }

    public async Task InvokeAsync(HttpContext httpContext)
    {
        try
        {
            await _next(httpContext);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Something went wrong: {ex.Message}");
            await HandleExceptionAsync(httpContext, ex);
        }
    }

    private async Task HandleExceptionAsync(HttpContext context, Exception exception)
    {
        context.Response.ContentType = "application/json";

        var errorDetails = new ErrorDetails
        {
            Message = "Internal Server Error"
        };

        switch (exception)
        {
            case ValidationException validationEx:
                context.Response.StatusCode = StatusCodes.Status400BadRequest;
                errorDetails.Message = validationEx.Message;
                errorDetails.ExceptionType = "Validation Error";
                break;

            case KeyNotFoundException notFoundEx:
                context.Response.StatusCode = StatusCodes.Status404NotFound;
                errorDetails.Message = notFoundEx.Message;
                errorDetails.ExceptionType = "Not Found";
                break;

            case UnauthorizedAccessException unauthorizedEx:
                context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                errorDetails.Message = unauthorizedEx.Message;
                errorDetails.ExceptionType = "Unauthorized";
                break;

            default:
                context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                errorDetails.ExceptionType = "Server Error";
                // Solo incluir detalles técnicos en desarrollo
                if (_env.IsDevelopment())
                {
                    errorDetails.Message = exception.Message;
                    errorDetails.StackTrace = exception.StackTrace;
                }
                break;
        }

        errorDetails.StatusCode = context.Response.StatusCode;

        var result = JsonSerializer.Serialize(errorDetails, new JsonSerializerOptions 
        { 
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase 
        });

        await context.Response.WriteAsync(result);
    }
}

// Api/Extensions/ExceptionMiddlewareExtensions.cs
public static class ExceptionMiddlewareExtensions
{
    public static IApplicationBuilder UseGlobalExceptionHandler(
        this IApplicationBuilder app)
    {
        return app.UseMiddleware<ExceptionMiddleware>();
    }
}

// Entity/Common/Exceptions/ValidationException.cs
public class ValidationException : Exception
{
    public ValidationException() : base() { }
    
    public ValidationException(string message) : base(message) { }
    
    public ValidationException(string message, Exception innerException) 
        : base(message, innerException) { }
}

// Entity/Common/Exceptions/NotFoundException.cs
public class NotFoundException : Exception
{
    public NotFoundException() : base() { }
    
    public NotFoundException(string message) : base(message) { }
    
    public NotFoundException(string message, Exception innerException) 
        : base(message, innerException) { }
}

// Entity/Common/Exceptions/UnauthorizedException.cs
public class UnauthorizedException : Exception
{
    public UnauthorizedException() : base() { }
    
    public UnauthorizedException(string message) : base(message) { }
    
    public UnauthorizedException(string message, Exception innerException) 
        : base(message, innerException) { }
}

```

Ahora, necesitas actualizar el Program.cs para usar el middleware:

```csharp
var builder = WebApplication.CreateBuilder(args);

// ... otros servicios ...

var app = builder.Build();

// Agregar el middleware de excepciones ANTES de los demás middlewares
app.UseGlobalExceptionHandler();

// ... resto de la configuración del pipeline ...
```

Y actualizar el ProductoService para usar las nuevas excepciones personalizadas:

```csharp
public class ProductoService : IProductoService
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly ILogger<ProductoService> _logger;

    public ProductoService(IUnitOfWork unitOfWork, ILogger<ProductoService> logger)
    {
        _unitOfWork = unitOfWork;
        _logger = logger;
    }

    public async Task<Result<Producto>> GetProductoByIdAsync(int id)
    {
        try
        {
            var producto = await _unitOfWork.Productos.GetByIdAsync(id);
            if (producto == null)
                throw new NotFoundException($"No se encontró el producto con ID: {id}");

            return Result<Producto>.Success(producto);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error obteniendo producto con ID: {id}");
            throw; // El middleware manejará la excepción
        }
    }

    public async Task<Result<Producto>> CreateProductoAsync(Producto producto)
    {
        try
        {
            if (string.IsNullOrEmpty(producto.Nombre))
                throw new ValidationException("El nombre del producto es requerido");

            if (producto.Precio <= 0)
                throw new ValidationException("El precio del producto debe ser mayor a 0");

            await _unitOfWork.Productos.AddAsync(producto);
            await _unitOfWork.CompleteAsync();
            return Result<Producto>.Success(producto, 201);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creando nuevo producto");
            throw;
        }
    }

    // Implementar el resto de los métodos de manera similar...
}
```

Esta implementación proporciona:

1. **Manejo centralizado de excepciones**:
   - Captura todas las excepciones no manejadas
   - Registra los errores usando ILogger
   - Devuelve respuestas JSON consistentes

2. **Excepciones personalizadas**:
   - ValidationException (400 Bad Request)
   - NotFoundException (404 Not Found)
   - UnauthorizedException (401 Unauthorized)

3. **Respuestas de error estructuradas** que incluyen:
   - Código de estado HTTP
   - Mensaje de error
   - Tipo de excepción
   - Stack trace (solo en desarrollo)
   - Timestamp

4. **Seguridad**:
   - Oculta detalles técnicos en producción
   - Muestra información detallada solo en desarrollo

5. **Logging**:
   - Registra automáticamente todas las excepciones
   - Incluye detalles contextuales

Beneficios:
- Manejo consistente de errores en toda la aplicación
- Mejora la seguridad ocultando detalles sensibles en producción
- Facilita el debugging en desarrollo
- Reduce código repetitivo en los controladores
- Mejora la mantenibilidad

¿Necesitas ayuda para implementar algo más específico en el manejo de excepciones?